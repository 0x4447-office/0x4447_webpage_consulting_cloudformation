{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Deploy all resources that are needed for the Terms of Service page.",
	"Parameters": {
		"DomainHomePage": {
			"Description": "Type your domain for your project",
			"Type": "String"
		},
		"CodePipelineArtifactsParam": {
			"Description": "The S3 bucket name where CodePipeline will store the artifacts (this is needed only by CP to work, and pass task results to the next stage).",
			"Type": "String"
		},
		"CertificateARN": {
			"Description": "The ARN of a SSL Certificate.",
			"Type": "String"
		},
		"S3BucketEmail": {
			"Description": "This bucket is where we are goign to save the data from the contact page, to then be sent as an email.",
			"Type": "String"
		},
		"GitHubTokenParam": {
			"Description": "You need to create a Personal access tokens (https://github.com/settings/tokens) for CodePipeline to have access to the GitHub repo despite it being public.",
			"Type": "String"
		},
		"StageParam": {
			"Description": "Select what type of environment are you deploying.",
			"Type": "String",
			"AllowedValues": [
				"master",
				"development"
			],
			"Default": "development"
		}
	},
	"Resources": {
		"CloudFrontStart": {
			"Type": "AWS::CloudFront::Distribution",
			"Properties": {
				"DistributionConfig": {
					"Comment": "consulting.0x4447.com",
					"DefaultCacheBehavior": {
						"ForwardedValues": {
							"Cookies": {
								"Forward": "none"
							},
							"QueryString": false
						},
						"MinTTL": 0,
						"TargetOriginId": {
							"Fn::Sub": "${S3WebpageDocumentation}.s3-website-${AWS::Region}.amazonaws.com"
						},
						"ViewerProtocolPolicy": "redirect-to-https",
						"AllowedMethods": [
							"GET",
							"HEAD"
						],
						"CachedMethods": [
							"GET",
							"HEAD"
						],
						"Compress": true,
						"DefaultTTL": 86400,
						"MaxTTL": 31536000,
						"SmoothStreaming": false
					},
					"Enabled": true,
					"Origins": [
						{
							"DomainName": {
								"Fn::Sub": "${S3WebpageDocumentation}.s3-website-${AWS::Region}.amazonaws.com"
							},
							"Id": {
								"Fn::Sub": "${S3WebpageDocumentation}.s3-website-${AWS::Region}.amazonaws.com"
							},
							"CustomOriginConfig": {
								"HTTPPort": 80,
								"HTTPSPort": 443,
								"OriginProtocolPolicy": "http-only",
								"OriginSSLProtocols": [
									"TLSv1.1"
								]
							}
						}
					],
					"Aliases": [
						{
							"Fn::Sub": "${DomainHomePage}"
						}
					],
					"ViewerCertificate": {
						"AcmCertificateArn": {
							"Ref": "CertificateARN"
						},
						"SslSupportMethod": "sni-only"
					},
					"DefaultRootObject": "index.html",
					"HttpVersion": "http2",
					"IPV6Enabled": true,
					"PriceClass": "PriceClass_100",
					"Restrictions": {
						"GeoRestriction": {
							"RestrictionType": "blacklist",
							"Locations": [
								"CN",
								"LA",
								"CU",
								"VN",
								"KP"
							]
						}
					}
				}
			}
		},
		"S3WebpageDocumentation": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"AccessControl": "PublicRead",
				"BucketName": "consulting.0x4447.com",
				"CorsConfiguration": {
					"CorsRules": [
						{
							"AllowedHeaders": [
								"Authorization"
							],
							"AllowedMethods": [
								"GET"
							],
							"AllowedOrigins": [
								"*"
							],
							"MaxAge": 3000
						}
					]
				},
				"WebsiteConfiguration": {
					"ErrorDocument": "404/index.html",
					"IndexDocument": "index.html"
				}
			}
		},
		"S3WebpageDocumentationPolicy": {
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"Bucket": {
					"Ref": "S3WebpageDocumentation"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Sid": "PublicReadGetObject",
							"Effect": "Allow",
							"Principal": "*",
							"Action": "s3:GetObject",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3WebpageDocumentation}/*"
							}
						}
					]
				}
			}
		},
		"CodeBuildWebpageDocumentation": {
			"Type": "AWS::CodeBuild::Project",
			"Properties": {
				"Name": "webpage_consulting",
				"ServiceRole": {
					"Fn::GetAtt": [
						"CodeBuildWebpageDocumentationRole",
						"Arn"
					]
				},
				"TimeoutInMinutes": 60,
				"Source": {
					"Type": "CODEPIPELINE",
					"BuildSpec": "buildspec.yml"
				},
				"Artifacts": {
					"Type": "CODEPIPELINE"
				},
				"Environment": {
					"Type": "LINUX_CONTAINER",
					"ComputeType": "BUILD_GENERAL1_SMALL",
					"Image": "aws/codebuild/standard:3.0",
					"EnvironmentVariables": [
						{
							"Name": "AWS_REGION",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "AWS::Region"
							}
						},
						{
							"Name": "IDENTITY_POOL_ID",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "CognitoIdentityPool"
							}
						},
						{
							"Name": "S3_BUCKET_EMAIL",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "S3BucketEmail"
							}
						},
						{
							"Name": "S3_BUCKET_SITE",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "S3WebpageDocumentation"
							}
						},
						{
							"Name": "DISTRIBUTION_ID",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "CloudFrontStart"
							}
						}
					]
				}
			}
		},
		"CodeBuildWebpageDocumentationRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "webpage_consulting_codebuild",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "codebuild.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				}
			}
		},
		"CodeBuildWebpageDocumentationPolicyCloudFrontCreateInvalidation": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageDocumentationRole"
					}
				],
				"PolicyName": "cloud_front_invalidate",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"cloudfront:CreateInvalidation"
							],
							"Resource": "*"
						}
					]
				}
			}
		},
		"CodeBuildWebpageDocumentationPolicyCloudFrontList": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageDocumentationRole"
					}
				],
				"PolicyName": "cloud_front_list",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"cloudfront:ListDistributions"
							],
							"Resource": "*"
						}
					]
				}
			}
		},
		"CodeBuildWebpageDocumentationPolicyCWL": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageDocumentationRole"
					}
				],
				"PolicyName": "cloud_watch_log_access",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents"
							],
							"Resource": [
								{
									"Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
								}
							]
						}
					]
				}
			}
		},
		"CodeBuildWebpageDocumentationPolicyS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageDocumentationRole"
					}
				],
				"PolicyName": "s3_artifact_access",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:*",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${CodePipelineArtifactsParam}/*"
							}
						}
					]
				}
			}
		},
		"CodeBuildWebpageDocumentationPolicyS3Hosting": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageDocumentationRole"
					}
				],
				"PolicyName": "s3_hosting",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"s3:PutObject",
								"s3:DeleteObject"
							],
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3WebpageDocumentation}/*"
							}
						}
					]
				}
			}
		},
		"PipelineWebpageDocumentation": {
			"Type": "AWS::CodePipeline::Pipeline",
			"Properties": {
				"Name": "webpage_consulting",
				"ArtifactStore": {
					"Location": {
						"Ref": "CodePipelineArtifactsParam"
					},
					"Type": "S3"
				},
				"RoleArn": {
					"Fn::GetAtt": [
						"PipelineWebpageDocumentationRole",
						"Arn"
					]
				},
				"Stages": [
					{
						"Name": "Get",
						"Actions": [
							{
								"Name": "Material",
								"RunOrder": 1,
								"ActionTypeId": {
									"Category": "Source",
									"Owner": "ThirdParty",
									"Provider": "GitHub",
									"Version": "1"
								},
								"Configuration": {
									"Owner": "0x4447-office",
									"Repo": "0x4447_webpage_consulting",
									"Branch": {
										"Ref": "StageParam"
									},
									"PollForSourceChanges": false,
									"OAuthToken": {
										"Ref": "GitHubTokenParam"
									}
								},
								"OutputArtifacts": [
									{
										"Name": "material"
									}
								]
							}
						]
					},
					{
						"Name": "Cast",
						"Actions": [
							{
								"Name": "Mold",
								"RunOrder": 1,
								"InputArtifacts": [
									{
										"Name": "material"
									}
								],
								"Configuration": {
									"ProjectName": {
										"Ref": "CodeBuildWebpageDocumentation"
									}
								},
								"ActionTypeId": {
									"Category": "Build",
									"Owner": "AWS",
									"Provider": "CodeBuild",
									"Version": "1"
								}
							}
						]
					}
				]
			}
		},
		"PipelineWebpageDocumentationRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "webpage_consulting_codepipeline",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "codepipeline.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				}
			}
		},
		"PipelineWebpageDocumentationWebhook": {
			"Type": "AWS::CodePipeline::Webhook",
			"Properties": {
				"Authentication": "GITHUB_HMAC",
				"AuthenticationConfiguration": {
					"SecretToken": {
						"Ref": "GitHubTokenParam"
					}
				},
				"Filters": [
					{
						"JsonPath": "$.ref",
						"MatchEquals": "refs/heads/{Branch}"
					}
				],
				"TargetPipeline": {
					"Ref": "PipelineWebpageDocumentation"
				},
				"TargetAction": "Material",
				"TargetPipelineVersion": {
					"Fn::GetAtt": [
						"PipelineWebpageDocumentation",
						"Version"
					]
				},
				"RegisterWithThirdParty": true
			}
		},
		"PipelineWebpageDocumentationPolicyS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "s3",
				"Roles": [
					{
						"Ref": "PipelineWebpageDocumentationRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:*",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${CodePipelineArtifactsParam}/*"
							}
						}
					]
				}
			}
		},
		"PipelineWebpageDocumentationPolicyCB": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "code_build",
				"Roles": [
					{
						"Ref": "PipelineWebpageDocumentationRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"codebuild:BatchGetBuilds",
								"codebuild:StartBuild"
							],
							"Resource": {
								"Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildWebpageDocumentation}"
							}
						}
					]
				}
			}
		},
		"CognitoIdentityPool": {
			"Type": "AWS::Cognito::IdentityPool",
			"Properties": {
				"IdentityPoolName": "zer0x_consulting",
				"AllowUnauthenticatedIdentities": true
			}
		},
		"CognitoIdentityPoolPolicyS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "s3",
				"Roles": [
					{
						"Ref": "CognitoIDPUnauthenticatedRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:PutObject",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3BucketEmail}/*"
							}
						}
					]
				}
			}
		},
		"CognitoIdentityPoolRoleAttachment": {
			"Type": "AWS::Cognito::IdentityPoolRoleAttachment",
			"Properties": {
				"IdentityPoolId": {
					"Ref": "CognitoIdentityPool"
				},
				"Roles": {
					"authenticated": {
						"Fn::GetAtt": [
							"CognitoIDPAuthenticatedRole",
							"Arn"
						]
					},
					"unauthenticated": {
						"Fn::GetAtt": [
							"CognitoIDPUnauthenticatedRole",
							"Arn"
						]
					}
				}
			}
		},
		"CognitoIDPAuthenticatedRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "webpage_consulting_cognito_identitypool_authenticated",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Federated": "cognito-identity.amazonaws.com"
							},
							"Action": "sts:AssumeRoleWithWebIdentity",
							"Condition": {
								"StringEquals": {
									"cognito-identity.amazonaws.com:aud": {
										"Ref": "CognitoIdentityPool"
									}
								},
								"ForAnyValue:StringLike": {
									"cognito-identity.amazonaws.com:amr": "authenticated"
								}
							}
						}
					]
				}
			}
		},
		"CognitoIDPUnauthenticatedRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "webpage_consulting_cognito_identitypool_unauthenticated",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Federated": "cognito-identity.amazonaws.com"
							},
							"Action": "sts:AssumeRoleWithWebIdentity",
							"Condition": {
								"StringEquals": {
									"cognito-identity.amazonaws.com:aud": {
										"Ref": "CognitoIdentityPool"
									}
								},
								"ForAnyValue:StringLike": {
									"cognito-identity.amazonaws.com:amr": "unauthenticated"
								}
							}
						}
					]
				}
			}
		},
		"HttpApiStage": {
			"Type": "AWS::ApiGatewayV2::Stage",
			"Properties": {
				"ApiId": {
					"Ref": "HttpApi"
				},
				"AutoDeploy": true,
				"Description": "Default",
				"StageName": "$default"
			}
		},
		"HttpApiRoute": {
			"Type": "AWS::ApiGatewayV2::Route",
			"DependsOn": [
				"HttpApiIntegration"
			],
			"Properties": {
				"ApiId": {
					"Ref": "HttpApi"
				},
				"RouteKey": "POST /",
				"AuthorizationType": "NONE",
				"Target": {
					"Fn::Join": [
						"/",
						[
							"integrations",
							{
								"Ref": "HttpApiIntegration"
							}
						]
					]
				}
			}
		},
		"HttpApiIntegration": {
			"Type": "AWS::ApiGatewayV2::Integration",
			"Properties": {
				"ApiId": {
					"Ref": "HttpApi"
				},
				"Description": "Affiliate Tracking",
				"IntegrationType": "AWS_PROXY",
				"IntegrationUri": {
					"Fn::Join": [
						"",
						[
							"arn",
							":",
							"aws",
							":",
							"apigateway",
							":",
							{
								"Ref": "AWS::Region"
							},
							":",
							"lambda",
							":",
							"path/2015-03-31/functions/",
							{
								"Fn::GetAtt": [
									"CalendarLambda",
									"Arn"
								]
							},
							"/invocations"
						]
					]
				},
				"IntegrationMethod": "POST",
				"PayloadFormatVersion": "1.0"
			}
		},
		"HttpApi": {
			"Type": "AWS::ApiGatewayV2::Api",
			"Properties": {
				"Name": "calendly",
				"Description": "Get notifications from Calendly.",
				"ProtocolType": "HTTP"
			}
		},
		"CalendarLambdaCodeBuild": {
			"Type": "AWS::CodeBuild::Project",
			"Properties": {
				"Name": "calendar",
				"ServiceRole": {
					"Fn::GetAtt": [
						"CalendarLambdaCodeBuildRole",
						"Arn"
					]
				},
				"TimeoutInMinutes": 60,
				"Source": {
					"Type": "CODEPIPELINE",
					"BuildSpec": "buildspec.yml"
				},
				"Artifacts": {
					"Type": "CODEPIPELINE"
				},
				"Environment": {
					"Type": "LINUX_CONTAINER",
					"ComputeType": "BUILD_GENERAL1_SMALL",
					"Image": "aws/codebuild/standard:3.0",
					"EnvironmentVariables": [
						{
							"Name": "AWS_REGION",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "AWS::Region"
							}
						}
					]
				}
			}
		},
		"CalendarLambdaCodeBuildRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "calendar_codebuild",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "codebuild.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"Policies": [
					{
						"PolicyName": "cloudwatch_logs",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents"
									],
									"Resource": [
										{
											"Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
										}
									]
								}
							]
						}
					},
					{
						"PolicyName": "s3_artifact",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "s3:GetObject",
									"Resource": {
										"Fn::Sub": "arn:aws:s3:::${CodePipelineArtifactsParam}/*"
									}
								}
							]
						}
					},
					{
						"PolicyName": "lambda_update",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "lambda:UpdateFunctionCode",
									"Resource": {
										"Fn::GetAtt": [
											"CalendarLambda",
											"Arn"
										]
									}
								}
							]
						}
					}
				]
			}
		},
		"CalendarCodePipelineRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "calendar_code_pipeline",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "codepipeline.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				}
			}
		},
		"CalendarCodePipeline": {
			"Type": "AWS::CodePipeline::Pipeline",
			"DependsOn": "CalendarCodePipelineRole",
			"Properties": {
				"Name": "calendar",
				"ArtifactStore": {
					"Location": {
						"Ref": "CodePipelineArtifactsParam"
					},
					"Type": "S3"
				},
				"RoleArn": {
					"Fn::GetAtt": [
						"CalendarCodePipelineRole",
						"Arn"
					]
				},
				"Stages": [
					{
						"Name": "Get",
						"Actions": [
							{
								"Name": "Material",
								"RunOrder": 1,
								"ActionTypeId": {
									"Category": "Source",
									"Owner": "ThirdParty",
									"Provider": "GitHub",
									"Version": "1"
								},
								"Configuration": {
									"Owner": "0x4447-office",
									"Repo": "0x4447_webpage_consulting_lambda_chime",
									"Branch": {
										"Ref": "StageParam"
									},
									"PollForSourceChanges": false,
									"OAuthToken": {
										"Ref": "GitHubTokenParam"
									}
								},
								"OutputArtifacts": [
									{
										"Name": "source_code"
									}
								]
							}
						]
					},
					{
						"Name": "Cast",
						"Actions": [
							{
								"Name": "Mold",
								"RunOrder": 1,
								"InputArtifacts": [
									{
										"Name": "source_code"
									}
								],
								"Configuration": {
									"ProjectName": {
										"Ref": "CalendarLambdaCodeBuild"
									}
								},
								"ActionTypeId": {
									"Category": "Build",
									"Owner": "AWS",
									"Provider": "CodeBuild",
									"Version": "1"
								}
							}
						]
					}
				]
			}
		},
		"CodePipelinePolicyCB": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "Default",
				"Roles": [
					{
						"Ref": "CalendarCodePipelineRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"codebuild:BatchGetBuilds",
								"codebuild:StartBuild"
							],
							"Resource": {
								"Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/*"
							}
						},
						{
							"Effect": "Allow",
							"Action": "s3:*",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${CodePipelineArtifactsParam}/*"
							}
						}
					]
				}
			}
		},
		"CalendarCodePipelineWebhook": {
			"Type": "AWS::CodePipeline::Webhook",
			"Properties": {
				"Authentication": "GITHUB_HMAC",
				"AuthenticationConfiguration": {
					"SecretToken": {
						"Ref": "GitHubTokenParam"
					}
				},
				"Filters": [
					{
						"JsonPath": "$.ref",
						"MatchEquals": "refs/heads/{Branch}"
					}
				],
				"TargetPipeline": {
					"Ref": "CalendarCodePipeline"
				},
				"TargetAction": "Material",
				"TargetPipelineVersion": {
					"Fn::GetAtt": [
						"CalendarCodePipeline",
						"Version"
					]
				},
				"RegisterWithThirdParty": true
			}
		},
		"CalendarLambda": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"FunctionName": "calendar",
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"",
							[
								"exports.handler = async (event) => {return true;};"
							]
						]
					}
				},
				"Handler": "index.handler",
				"MemorySize": 128,
				"Role": {
					"Fn::GetAtt": [
						"CalendarLambdaRole",
						"Arn"
					]
				},
				"Runtime": "nodejs12.x",
				"Timeout": 60,
				"Environment": {
					"Variables": {
						"STAGE": {
							"Ref": "StageParam"
						}
					}
				}
			}
		},
		"CalendarLambdaPermission": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"Action": "lambda:InvokeFunction",
				"FunctionName": {
					"Fn::GetAtt": [
						"CalendarLambda",
						"Arn"
					]
				},
				"Principal": "apigateway.amazonaws.com",
				"SourceArn": {
					"Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*"
				}
			}
		},
		"CalendarLambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "calendar_lambda",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "lambda.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
				]
			}
		},
		"CalendarLambdaPolicyS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CalendarLambdaRole"
					}
				],
				"PolicyName": "s3",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "S3:PutObject",
							"Resource": [
								{
									"Fn::Sub": "arn:aws:s3:::0x4447-web-us-east-1-smtp/*"
								}
							]
						}
					]
				}
			}
		}
	}
}